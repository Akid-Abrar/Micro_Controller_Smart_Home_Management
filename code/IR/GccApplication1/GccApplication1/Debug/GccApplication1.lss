
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000677  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033c  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	//unsigned char c=0;
	
	
	// ----------------------------------------------------------
	
	MCUCSR |=(1 << JTD);
  6c:	84 b7       	in	r24, 0x34	; 52
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	84 bf       	out	0x34, r24	; 52
	MCUCSR |=(1 << JTD);
  72:	84 b7       	in	r24, 0x34	; 52
  74:	80 68       	ori	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	
	DDRB=0x00;
  78:	17 ba       	out	0x17, r1	; 23
	PORTB=0xf0;
  7a:	80 ef       	ldi	r24, 0xF0	; 240
  7c:	88 bb       	out	0x18, r24	; 24
	
	DDRA=0xff;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	8a bb       	out	0x1a, r24	; 26
	DDRC=0XFF;
  82:	84 bb       	out	0x14, r24	; 20
	
    int counter=0;
    
	unsigned char upOn = 0, downOn = 0;
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	40 e0       	ldi	r20, 0x00	; 0
	PORTB=0xf0;
	
	DDRA=0xff;
	DDRC=0XFF;
	
    int counter=0;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
		
		else if(isClear(curState, 1)) {
			upOn = 1;
			downOn = 1;
  8c:	61 e0       	ldi	r22, 0x01	; 1
		}
		else if(isClear(curState, 2)) {
			if(upOn) {
				counter++;
				upOn = 0;
				downOn = 0;
  8e:	70 e0       	ldi	r23, 0x00	; 0
			}
		}
		
		if(counter) PORTA = 0xff;
  90:	5f ef       	ldi	r21, 0xFF	; 255
	unsigned char upOn = 0, downOn = 0;
	unsigned char curState;
	
	while(1) {
		
		curState = PINB;
  92:	86 b3       	in	r24, 0x16	; 22
		PORTC = counter;
  94:	25 bb       	out	0x15, r18	; 21
		
		if(isClear(curState, 0)) {
  96:	80 fd       	sbrc	r24, 0
  98:	0a c0       	rjmp	.+20     	; 0xae <main+0x42>
			if(downOn==1) {
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	a9 f4       	brne	.+42     	; 0xc8 <main+0x5c>
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	31 09       	sbc	r19, r1
  a2:	12 f4       	brpl	.+4      	; 0xa8 <main+0x3c>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
				counter--;
				if(counter < 0) counter = 0;
				upOn = 0;
				downOn = 0;
  a8:	97 2f       	mov	r25, r23
		
		if(isClear(curState, 0)) {
			if(downOn==1) {
				counter--;
				if(counter < 0) counter = 0;
				upOn = 0;
  aa:	47 2f       	mov	r20, r23
  ac:	0d c0       	rjmp	.+26     	; 0xc8 <main+0x5c>
				downOn = 0;
			}
		}
		
		else if(isClear(curState, 1)) {
  ae:	81 ff       	sbrs	r24, 1
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <main+0x58>
			upOn = 1;
			downOn = 1;
		}
		else if(isClear(curState, 2)) {
  b2:	82 fd       	sbrc	r24, 2
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <main+0x5c>
			if(upOn) {
  b6:	44 23       	and	r20, r20
  b8:	39 f0       	breq	.+14     	; 0xc8 <main+0x5c>
				counter++;
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
				upOn = 0;
				downOn = 0;
  be:	97 2f       	mov	r25, r23
			downOn = 1;
		}
		else if(isClear(curState, 2)) {
			if(upOn) {
				counter++;
				upOn = 0;
  c0:	47 2f       	mov	r20, r23
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x5c>
			}
		}
		
		else if(isClear(curState, 1)) {
			upOn = 1;
			downOn = 1;
  c4:	96 2f       	mov	r25, r22
				downOn = 0;
			}
		}
		
		else if(isClear(curState, 1)) {
			upOn = 1;
  c6:	46 2f       	mov	r20, r22
				upOn = 0;
				downOn = 0;
			}
		}
		
		if(counter) PORTA = 0xff;
  c8:	21 15       	cp	r18, r1
  ca:	31 05       	cpc	r19, r1
  cc:	11 f0       	breq	.+4      	; 0xd2 <main+0x66>
  ce:	5b bb       	out	0x1b, r21	; 27
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <main+0x68>
		else PORTA = 0X00;
  d2:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	e7 ea       	ldi	r30, 0xA7	; 167
  d6:	f1 e6       	ldi	r31, 0x61	; 97
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x6c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
  e0:	d8 cf       	rjmp	.-80     	; 0x92 <main+0x26>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
