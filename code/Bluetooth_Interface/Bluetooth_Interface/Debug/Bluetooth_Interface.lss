
Bluetooth_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000668  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000444  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a8  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define LED1 PORTC					/* connected LED on PORT pin */

int main(void)
{
	char Data_in;
	DDRB = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  70:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
  72:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0x01;						/* make PORT as output port */
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	8a bb       	out	0x1a, r24	; 26
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
  78:	60 e8       	ldi	r22, 0x80	; 128
  7a:	75 e2       	ldi	r23, 0x25	; 37
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 93 00 	call	0x126	; 0x126 <USART_Init>
	LED = 0;
  84:	18 ba       	out	0x18, r1	; 24
	LED1=0;
  86:	15 ba       	out	0x15, r1	; 21
	unsigned char c=0,d=0,e=0,c1=0,d1=0,e1=0;

	ADMUX = 0b01000111; // REFS1:0 = 01    -> AVCC as reference,
  88:	87 e4       	ldi	r24, 0x47	; 71
  8a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000001;
  8c:	81 e8       	ldi	r24, 0x81	; 129
  8e:	86 b9       	out	0x06, r24	; 6
	PORTA = 0x00;
	DDRA  = 0x01;						/* make PORT as output port */
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
	LED = 0;
	LED1=0;
	unsigned char c=0,d=0,e=0,c1=0,d1=0,e1=0;
  90:	c1 2c       	mov	r12, r1
  92:	d1 2c       	mov	r13, r1
  94:	e1 2c       	mov	r14, r1
  96:	00 e0       	ldi	r16, 0x00	; 0
  98:	f1 2c       	mov	r15, r1
  9a:	c0 e0       	ldi	r28, 0x00	; 0
							}
							else
							{
								LED1 &= ~(1<<PC6);							/* Turn OFF LED */
								//USART_SendString("LED_OFF");
								e1=0;
  9c:	10 e0       	ldi	r17, 0x00	; 0
						{
							if(e1==0)
							{
								LED1 |= (1<<PC6);							/* Turn ON LED */
								//USART_SendString("LED_ON");
								e1=1;
  9e:	d1 e0       	ldi	r29, 0x01	; 1
	ADMUX = 0b01000111; // REFS1:0 = 01    -> AVCC as reference,
	ADCSRA = 0b10000001;

	while(1)
	{
		Data_in = USART_RxChar();						/* receive data from Bluetooth device*/
  a0:	0e 94 c1 00 	call	0x182	; 0x182 <USART_RxChar>
		if(Data_in =='1')
  a4:	81 33       	cpi	r24, 0x31	; 49
  a6:	41 f4       	brne	.+16     	; 0xb8 <main+0x4c>
		{
			if(c==0)
  a8:	c1 11       	cpse	r28, r1
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <main+0x46>
			{
				LED |= (1<<PB0);							/* Turn ON LED */
  ac:	c0 9a       	sbi	0x18, 0	; 24
				//USART_SendString("LED_ON");
				c=1;
  ae:	cd 2f       	mov	r28, r29
  b0:	34 c0       	rjmp	.+104    	; 0x11a <main+0xae>
			}
			else
			{
				LED &= ~(1<<PB0);							/* Turn OFF LED */
  b2:	c0 98       	cbi	0x18, 0	; 24
				//USART_SendString("LED_OFF");
				c=0;
  b4:	c1 2f       	mov	r28, r17
  b6:	31 c0       	rjmp	.+98     	; 0x11a <main+0xae>
			}
			/* send status of LED i.e. LED ON */

		}
		else if(Data_in =='2')
  b8:	82 33       	cpi	r24, 0x32	; 50
  ba:	41 f4       	brne	.+16     	; 0xcc <main+0x60>
		{
			if(e==0)
  bc:	01 11       	cpse	r16, r1
  be:	03 c0       	rjmp	.+6      	; 0xc6 <main+0x5a>
			{
				LED |= (1<<PB1);							/* Turn ON LED */
  c0:	c1 9a       	sbi	0x18, 1	; 24
				//USART_SendString("LED_ON");
				e=1;
  c2:	0d 2f       	mov	r16, r29
  c4:	2a c0       	rjmp	.+84     	; 0x11a <main+0xae>
			}
			else
			{
				LED &= ~(1<<PB1);							/* Turn OFF LED */
  c6:	c1 98       	cbi	0x18, 1	; 24
				//USART_SendString("LED_OFF");
				e=0;
  c8:	01 2f       	mov	r16, r17
  ca:	27 c0       	rjmp	.+78     	; 0x11a <main+0xae>
				}				/* send status of LED i.e. LED OFF */
			}
			else if(Data_in =='3')
  cc:	83 33       	cpi	r24, 0x33	; 51
  ce:	41 f4       	brne	.+16     	; 0xe0 <main+0x74>
			{
				if(d==0)
  d0:	f1 10       	cpse	r15, r1
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x6e>
				{
					LED |= (1<<PB2);							/* Turn ON LED */
  d4:	c2 9a       	sbi	0x18, 2	; 24
					//USART_SendString("LED_ON");
					d=1;
  d6:	fd 2e       	mov	r15, r29
  d8:	20 c0       	rjmp	.+64     	; 0x11a <main+0xae>
				}
				else
				{
					LED &= ~(1<<PB2);							/* Turn OFF LED */
  da:	c2 98       	cbi	0x18, 2	; 24
					//USART_SendString("LED_OFF");
					d=0;
  dc:	f1 2e       	mov	r15, r17
  de:	1d c0       	rjmp	.+58     	; 0x11a <main+0xae>
					}				/* send status of LED i.e. LED ON */

				}
				else if(Data_in =='4')
  e0:	84 33       	cpi	r24, 0x34	; 52
  e2:	41 f4       	brne	.+16     	; 0xf4 <main+0x88>
				{
					if(c1==0)
  e4:	e1 10       	cpse	r14, r1
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x82>
					{
						LED1 |= (1<<PC0);							/* Turn ON LED */
  e8:	a8 9a       	sbi	0x15, 0	; 21
						//USART_SendString("LED_ON");
						c1=1;
  ea:	ed 2e       	mov	r14, r29
  ec:	16 c0       	rjmp	.+44     	; 0x11a <main+0xae>
					}
					else
					{
						LED1 &= ~(1<<PC0);							/* Turn OFF LED */
  ee:	a8 98       	cbi	0x15, 0	; 21
						//USART_SendString("LED_OFF");
						c1=0;
  f0:	e1 2e       	mov	r14, r17
  f2:	13 c0       	rjmp	.+38     	; 0x11a <main+0xae>
						}				/* send status of LED i.e. LED OFF */
					}
					else if(Data_in =='5')
  f4:	85 33       	cpi	r24, 0x35	; 53
  f6:	41 f4       	brne	.+16     	; 0x108 <main+0x9c>
					{
						if(d1==0)
  f8:	d1 10       	cpse	r13, r1
  fa:	03 c0       	rjmp	.+6      	; 0x102 <main+0x96>
						{
							LED1 |= (1<<PC1);							/* Turn ON LED */
  fc:	a9 9a       	sbi	0x15, 1	; 21
							//USART_SendString("LED_ON");
							d1=1;
  fe:	dd 2e       	mov	r13, r29
 100:	0c c0       	rjmp	.+24     	; 0x11a <main+0xae>
						}
						else
						{
							LED1 &= ~(1<<PC1);							/* Turn OFF LED */
 102:	a9 98       	cbi	0x15, 1	; 21
							//USART_SendString("LED_OFF");
							d1=0;
 104:	d1 2e       	mov	r13, r17
 106:	09 c0       	rjmp	.+18     	; 0x11a <main+0xae>
							}				/* send status of LED i.e. LED OFF */
						}
						else if(Data_in =='6')
 108:	86 33       	cpi	r24, 0x36	; 54
 10a:	39 f4       	brne	.+14     	; 0x11a <main+0xae>
						{
							if(e1==0)
 10c:	c1 10       	cpse	r12, r1
 10e:	03 c0       	rjmp	.+6      	; 0x116 <main+0xaa>
							{
								LED1 |= (1<<PC6);							/* Turn ON LED */
 110:	ae 9a       	sbi	0x15, 6	; 21
								//USART_SendString("LED_ON");
								e1=1;
 112:	cd 2e       	mov	r12, r29
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0xae>
							}
							else
							{
								LED1 &= ~(1<<PC6);							/* Turn OFF LED */
 116:	ae 98       	cbi	0x15, 6	; 21
								//USART_SendString("LED_OFF");
								e1=0;
 118:	c1 2e       	mov	r12, r17
							//
							//
							//        double final_result = 1.0 * res / 256 ;
							//        int final_int = (int)(final_result * 100);

							if ((PINA & 0x02) != 0)
 11a:	c9 9b       	sbis	0x19, 1	; 25
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0xb6>
							{
								PORTA |= 0b00000001;
 11e:	d8 9a       	sbi	0x1b, 0	; 27
 120:	bf cf       	rjmp	.-130    	; 0xa0 <main+0x34>
							}
							else
							PORTA &= 0b11111110;
 122:	d8 98       	cbi	0x1b, 0	; 27
 124:	bd cf       	rjmp	.-134    	; 0xa0 <main+0x34>

00000126 <USART_Init>:

#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
	UCSRB |= (1 << RXEN) | (1 << TXEN) |(1 <<RXCIE);				/* Enable USART transmitter and receiver */
 126:	2a b1       	in	r18, 0x0a	; 10
 128:	28 69       	ori	r18, 0x98	; 152
 12a:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
 12c:	20 b5       	in	r18, 0x20	; 32
 12e:	26 68       	ori	r18, 0x86	; 134
 130:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 132:	dc 01       	movw	r26, r24
 134:	cb 01       	movw	r24, r22
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	aa 1f       	adc	r26, r26
 13c:	bb 1f       	adc	r27, r27
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	aa 1f       	adc	r26, r26
 144:	bb 1f       	adc	r27, r27
 146:	9c 01       	movw	r18, r24
 148:	ad 01       	movw	r20, r26
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	44 1f       	adc	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	44 1f       	adc	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	72 e1       	ldi	r23, 0x12	; 18
 15e:	8a e7       	ldi	r24, 0x7A	; 122
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 c5 00 	call	0x18a	; 0x18a <__udivmodsi4>
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	82 0f       	add	r24, r18
 16a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 16c:	da 01       	movw	r26, r20
 16e:	c9 01       	movw	r24, r18
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	a1 09       	sbc	r26, r1
 174:	b1 09       	sbc	r27, r1
 176:	89 2f       	mov	r24, r25
 178:	9a 2f       	mov	r25, r26
 17a:	ab 2f       	mov	r26, r27
 17c:	bb 27       	eor	r27, r27
 17e:	80 bd       	out	0x20, r24	; 32
 180:	08 95       	ret

00000182 <USART_RxChar>:
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
 182:	5f 9b       	sbis	0x0b, 7	; 11
 184:	fe cf       	rjmp	.-4      	; 0x182 <USART_RxChar>
	return(UDR);									/* Get and return received data */ 
 186:	8c b1       	in	r24, 0x0c	; 12
}
 188:	08 95       	ret

0000018a <__udivmodsi4>:
 18a:	a1 e2       	ldi	r26, 0x21	; 33
 18c:	1a 2e       	mov	r1, r26
 18e:	aa 1b       	sub	r26, r26
 190:	bb 1b       	sub	r27, r27
 192:	fd 01       	movw	r30, r26
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <__udivmodsi4_ep>

00000196 <__udivmodsi4_loop>:
 196:	aa 1f       	adc	r26, r26
 198:	bb 1f       	adc	r27, r27
 19a:	ee 1f       	adc	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	a2 17       	cp	r26, r18
 1a0:	b3 07       	cpc	r27, r19
 1a2:	e4 07       	cpc	r30, r20
 1a4:	f5 07       	cpc	r31, r21
 1a6:	20 f0       	brcs	.+8      	; 0x1b0 <__udivmodsi4_ep>
 1a8:	a2 1b       	sub	r26, r18
 1aa:	b3 0b       	sbc	r27, r19
 1ac:	e4 0b       	sbc	r30, r20
 1ae:	f5 0b       	sbc	r31, r21

000001b0 <__udivmodsi4_ep>:
 1b0:	66 1f       	adc	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	88 1f       	adc	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	1a 94       	dec	r1
 1ba:	69 f7       	brne	.-38     	; 0x196 <__udivmodsi4_loop>
 1bc:	60 95       	com	r22
 1be:	70 95       	com	r23
 1c0:	80 95       	com	r24
 1c2:	90 95       	com	r25
 1c4:	9b 01       	movw	r18, r22
 1c6:	ac 01       	movw	r20, r24
 1c8:	bd 01       	movw	r22, r26
 1ca:	cf 01       	movw	r24, r30
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
